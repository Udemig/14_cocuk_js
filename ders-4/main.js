function toplamaÄ°ÅŸlemi(a, b) {
  var toplam = a + b;
  document.write("Toplam:", toplam, "<br/>");
}
// toplamaÄ°ÅŸlemi fonksiyonu return satÄ±rÄ±na sahip olmadÄ±ÄŸÄ±ndan iÃ§erisinde bulunan deÄŸeri dÄ±ÅŸarÄ± Ã§Ä±karamaz.
var sonuÃ§ = toplamaÄ°ÅŸlemi(12, 44);

document.write("sonuÃ§:", sonuÃ§, "<br/>");

// FonksiyonlarÄ±n bir deÄŸer dÃ¶ndÃ¼rmesi istenebilir.Bu durumda fonksiyonun dÄ±ÅŸarÄ±ya dÃ¶ndÃ¼rmesi istenen deÄŸeri return satÄ±rÄ±nda yazarÄ±z.

function stokToplam(girdi, Ã§Ä±ktÄ±) {
  var stok = girdi - Ã§Ä±ktÄ±;

  return stok;
}

var stokAdet = stokToplam(100, 20);

document.write("Stok:", stokAdet, "<br/>");

// * Javascript Objeler

// Objeler iÃ§erisinde deÄŸiÅŸken,dizi,fonksiyon vs. Ã¶zellikler tutmaya olanak tanÄ±yan javascript yapÄ±larÄ±dÄ±r.Bu yapÄ±lar iÃ§erisinde deÄŸerleri key-value (anahtar-deÄŸer) Ã§iftleri halinde tutarlar.

// Bir obje tÄ±pkÄ± deÄŸiÅŸken tanÄ±mlar gibi var anahtar kelimesi yazÄ±lÄ±p devamÄ±nda bu objeye bir isim veriler tanÄ±mlanÄ±r.Bu objenin sahip olacaÄŸÄ± deÄŸerler ={} yapÄ±sÄ± oluÅŸturulduktan sonra {} iÃ§erisinde key-value Ã§iftleri halinde yazÄ±lÄ±r.

var kiÅŸi = {
  isim: "Yusuf",
  soyisim: "YAMAN",
  yaÅŸ: 22,
  email: "yusufyaman@gmail.com",
  hobiler: ["YazÄ±lÄ±m", "MÃ¼zik", "Spor", "YÃ¼zme"],
  bilgiVer: function () {
    document.write("KiÅŸi objesinden selamlar.", "<br/>");
  },
  kiÅŸiTanÄ±tÄ±m: function () {
    // Obje iÃ§erisinde objenin iÃ§erisinde yer alan bir deÄŸere eriÅŸmek istersek bu deÄŸerin baÅŸÄ±na 'this.' yapÄ±sÄ± konulmalÄ±dÄ±r.
    document.write(
      `KiÅŸi adÄ±: ${this.isim}\nKiÅŸi soyad: ${this.soyisim}\nKiÅŸi yaÅŸ: ${this.yaÅŸ}  <br/>`
    );
  },
};
// Objeye eriÅŸme
// console.log(kiÅŸi);

// Objenin iÃ§erisindeki elemanlara eriÅŸmek iÃ§in obje adÄ±ndan sonras '.' konulur ve eriÅŸilmek istenen deÄŸerin adÄ± yazÄ±lÄ±r.

// console.log(kiÅŸi.isim);
// console.log(kiÅŸi.soyisim);
// console.log(kiÅŸi.yaÅŸ);
// console.log(kiÅŸi.email);

// Obje iÃ§erisindeki diziye eriÅŸme
// console.log(kiÅŸi.hobiler);
// Obje iÃ§erisindeki dizinin bir elemanÄ±na eriÅŸme
// console.log(kiÅŸi.hobiler[0]);

kiÅŸi.bilgiVer();

kiÅŸi.kiÅŸiTanÄ±tÄ±m();

document.write(`---------------------------------------- <br/>`);

// * Javascript DÃ¶ngÃ¼ler:

// DÃ¶ngÃ¼ler javascript de tekrar gerektiren durumlar yÃ¶netmek iÃ§in kullanÄ±lÄ±r.Ã–r 100 defa ekrana 'selamlar javascript ğŸ’¯' yazdÄ±rmak.

// * For DÃ¶ngÃ¼sÃ¼ :

// Bu dÃ¶ngÃ¼ sayaÃ§ mantalitesiyle Ã§alÄ±ÅŸÄ±r.Bu dÃ¶ngÃ¼ye kontrol edeceÄŸi bir deÄŸiÅŸken verilir.Bu deÄŸiÅŸkenin nasÄ±l arttÄ±rÄ±lacaÄŸÄ± sÃ¶ylenir ve bir Ã¼st limit konulur.

// var sayÄ±1 = 10;

// console.log(sayÄ±1);

// sayÄ±1 = sayÄ±1 + 1;
// sayÄ±1++;

// console.log(sayÄ±1);

// document.write(`Selamlar Javascript ğŸ’¯ <br/>`);
// document.write(`Selamlar Javascript ğŸ’¯ <br/>`);
// document.write(`Selamlar Javascript ğŸ’¯ <br/>`);
// document.write(`Selamlar Javascript ğŸ’¯ <br/>`);

for (var sayaÃ§ = 0; sayaÃ§ < 10; sayaÃ§++) {
  document.write(`Selamlar Javascript ğŸ’¯ <br/>`);
}
document.write(`---------------------------------------- <br/>`);
// For dÃ¶ngÃ¼sÃ¼, ilk olarak bir baÅŸlangÄ±Ã§ deÄŸeri alÄ±r. Ä°kinci olarak, dÃ¶ngÃ¼nÃ¼n devam edebilmesi iÃ§in bir koÅŸul belirtilir. ÃœÃ§Ã¼ncÃ¼ olarak ise baÅŸlangÄ±Ã§ deÄŸerinin nasÄ±l gÃ¼ncelleneceÄŸi tanÄ±mlanÄ±r.

// todo: 1 den 50 ye kadar olan sayÄ±larÄ± ekrana yazdÄ±rÄ±nÄ±z.

for (var sayÄ± = 1; sayÄ± <= 50; sayÄ±++) {
  document.write(` ${sayÄ±} <br/>`);
}
document.write(`---------------------------------------- <br/>`);
// * While DÃ¶ngÃ¼sÃ¼:

// while dÃ¶ngÃ¼sÃ¼  () iÃ§erisinde bir koÅŸul ister.Bu koÅŸul saÄŸlanÄ±rsa {} iÃ§erisinde kalan alandaki iÅŸlem gerÃ§ekleÅŸtirilir.Fakat bu durumda uygulama sonsuz dÃ¶ngÃ¼ye girer.Bunu engellemek iÃ§in {} iÃ§erisinde koÅŸul durumunda kullanÄ±lan deÄŸer gÃ¼ncellenir.

var sayaÃ§1 = 2;

while (sayaÃ§1 < 10) {
  document.write(` Selamlar DÃ¼nya <br/>`);

  sayaÃ§1++;
}

document.write(`---------------------------------------- <br/>`);

// * Do-while DÃ¶ngÃ¼sÃ¼:

//  Do-while dÃ¶ngÃ¼sÃ¼ whiledan farklÄ± olarak iÅŸlemi bir defa geÃ§ekleÅŸtirir sonra ÅŸarta bakar.Yani koÅŸul saÄŸlanmasa bile bir defa Ã§alÄ±ÅŸÄ±r.

var sayaÃ§2 = 10;

do {
  document.write(` Selamlar DÃ¼nya !!! <br/>`);
  sayaÃ§2++;
} while (sayaÃ§2 < 5);

document.write(`---------------------------------------- <br/>`);
// Javascript Dizilerde DÃ¶ngÃ¼ler

var kiÅŸiler = ["Yusuf", "Enes", "ErtuÄŸrul", "Tahir", "YÄ±lmaz", "Mehmet"];

document.write(`Dizi: ${kiÅŸiler} <br/>`);

// document.write(`Dizi-1: ${kiÅŸiler[0]} <br/>`);
// document.write(`Dizi-2: ${kiÅŸiler[1]} <br/>`);

function yazdÄ±r(kiÅŸi) {
  document.write(`${kiÅŸi} <br/>`);
}

// forEach ==> Bu metod bir dizinin tÃ¼m elemanlarÄ± iÃ§in bir iÅŸlev yaptÄ±ran bir dÃ¶ngÃ¼dÃ¼r.

kiÅŸiler.forEach(yazdÄ±r);

document.write(`---------------------------------------- <br/>`);

// map ==> Bu metod bir dizinin tÃ¼m elemanlarÄ±nÄ± dÃ¶nerek yeni bir dizi oluÅŸturur.

var sayÄ±lar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

document.write(`SayÄ±lar: ${sayÄ±lar} <br/>`);

function ikiyleÃ‡arp(sayÄ±) {
  return sayÄ± * 2;
}

var yeniSayÄ±lar = sayÄ±lar.map(ikiyleÃ‡arp);

document.write(`Yeni SayÄ±lar: ${yeniSayÄ±lar} <br/>`);

// ! map ve forEach fonksiyonun farkÄ± forEach bir diziyi sadece dÃ¶ner.map ise bir diziyi dÃ¶nerken geriye yeni bir dizi daha oluÅŸturur.Bu sayede bir dizinin elemanlarÄ±nÄ± gÃ¼ncelleyebilir.

// ! KÄ±sacasÄ± bir dizinin tÃ¼m elemanlarÄ± iÃ§in bir iÅŸlem gerÃ§ekleÅŸtirilecekse dizilerde dÃ¶ngÃ¼ kullanÄ±lÄ±r.Bu noktada karÅŸÄ±mÄ±za 2 seÃ§enek Ã§Ä±kar map && forEach.EÄŸer bir dizinin elemanlarÄ± gÃ¼ncellenecekse map kullanÄ±lÄ±r eÄŸer sadece dizinin elemanlarÄ± dÃ¶nÃ¼lecekse bunun iÃ§im forEach kullanÄ±lÄ±r.
